rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Allow admins to read/write everything
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Allow authenticated users to read and write their own user document
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId &&
        request.resource.data.keys().hasOnly(['createdAt']);
      
      // Allow users to manage their saved courses (max 5 per user)
      match /savedCourses/{courseId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && 
                     request.auth.uid == userId &&
                     request.resource.data.id != null &&
                     (!exists(/databases/$(database)/documents/users/$(userId)/savedCourses/$(courseId)));
        allow update, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Add a function to check saved courses count
      function isUnderSavedLimit() {
        let savedCourses = getAfter(/databases/$(database)/documents/users/$(userId)/savedCourses);
        return savedCourses.size < 5;
      }
      
      // Allow users to log their own activities
      match /activities/{activityId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && 
          request.auth.uid == userId &&
          request.resource.data.keys().hasAll(['type', 'timestamp']) &&
          (request.resource.data.type in ['course_viewed', 'course_completed', 'search_performed', 'course_save', 'course_remove']) &&
          (request.resource.data.timestamp == request.time || request.resource.data.timestamp is string);
      }
    }
    
    // User progress tracking
    match /userProgress/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Activity logs - allow admins to read all, users to create their own
    match /activityLogs/{activityId} {
      allow read: if isAdmin();
      allow create: if request.auth != null && (
        // Allow users to create their own activity logs
        (request.resource.data.userId == request.auth.uid) ||
        // Or if it's a system-generated log
        (request.resource.data.userId == 'system')
      );
    }
    
    // Course views tracking (public read, authenticated write)
    match /courseViews/{courseId} {
      allow read: if true; // Public read access
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        request.resource.data.viewCount > 0 && 
        request.resource.data.lastViewed is timestamp;
    }
    
    // Search analytics (public read, authenticated write)
    match /searchCounts/{searchTerm} {
      allow read: if true; // Public read access
      allow write: if request.auth != null; // Any authenticated user can update search counts
    }
    
    // Allow read access to public data for authenticated users
    match /public/{document=**} {
      allow read: if request.auth != null;
    }
    
    // Settings - only admins can read/write
    match /settings/{document} {
      allow read, write: if isAdmin();
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}